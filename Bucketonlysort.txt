
void bucket :: bucketSort(node *&head,node *&last){
	int s=0,i,g,p;
	double d;	
	node *h=head;
	node *l=last;
	node *t=new node;
	node *temp=head1;
	s=temp->key;
	for(i=0;i<n;i++){		//the time complexity of this for loop turn into O(n^2), but it should be O(n), I couldn't do that
		d=a[i];
		g=(d*n);
		//cout<<"g => "<<g<<endl;
		//cout<<"s1 = "<<s<<endl;
		while(s<g){
			temp=temp->right;
			s=temp->key;
			//cout<<"s = "<<s<<endl;
		}
		if((temp->left)==NULL){
			t=insert(h,l,d);
			temp->left=t;
		}
		else if((temp->left)!=NULL){
			node *p=new node;
			p=NULL;
			l=searchLast(temp->left,p);
			t=insert(temp->left,l,d);
			temp->left=t;
		}
		s=0;
		d=0;
		g=0;
		t=NULL;
		temp=head1;
		h=NULL;
		l=NULL;
	}
	node *ptr=head1;
	while(ptr!=NULL){
		if((ptr->left)!=NULL){
			//cout<<"Inside loop"<<endl;
			insertionSort(ptr->left);
		}
		ptr=ptr->right;
	}
	select;ptr;
	concatinate(head1);
	cout<<"[.]Successfully sorted with Bucket Sort[.]"<<endl;
}


void bucket :: insertionSort(node *&head){
	int i;
	double val,d;
	node *ptr=head;
	while(ptr!=NULL){
		//cout<<"Inside InsertionSort"<<endl;
		node *t=ptr;
		node *t1=ptr->left; 
		val=t->data;
		while(t1!=NULL){
			d=t1->data;
			//cout<<"val = > "<<val<<endl;
			//cout<<"d = > "<<d<<endl;
			while((d>val) && (t1!=NULL)){
				t->data=d;
				t=t1;
				t1=t->left;
				if(t1!=NULL)
					d=t1->data;
				else
					d=0;
			}
			t->data=val;
		}
		t=NULL;
		select;t;
		t1=NULL;
		select;t1;
		ptr=ptr->right;
	}
	select;ptr;
}

void bucket :: concatinate(node *&head1){
	int s,u=0,i=0;
	node *temp=head1;
	while(temp!=NULL){
		cout<<"c"<<i<<endl;
		node *ptr=temp->left;
		while(ptr!=NULL){
			a[u]=ptr->data;
			u++;
			ptr=ptr->right;
		}
		ptr=NULL;
		select;ptr;
		temp=temp->right;
		i++;
	}
	temp=NULL;
	select;temp;
}
